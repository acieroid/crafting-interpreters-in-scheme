;; Token
(define (token type lexeme literal line)
  (list type lexeme literal line))
(define token-type car)
(define token-lexeme cadr)
(define token-literal caddr)
(define token-line cadddr)
(define (token-to-string token)
  (display (token-type token))
  (display " ")
  (display (token-lexeme token))
  (display " ")
  (display (token-literal token)))

;; Error-reporting
(define *had-error* #f)
(define (report line where message)
  (display "[line ")
  (display line)
  (display "] Error ")
  (display where)
  (display ": ")
  (display message)
  (newline)
  (set! *had-error* #t))

(define (error line message)
  (report line "" message))

(define (scan port)
  (define line 1)
  (define current 0)
  (define scanned '())
  (define (new-token type literal)
    (let ((scanned-so-far (list->string (reverse scanned))))
      (set! scanned '())
      (token type scanned-so-far literal line)))
  (define (new-token1 type)
    (new-token type #f))
  (define (match expected)
    (let ((c (peek-char port)))
      (if (or (eof-object? c)
              (not (char=? c expected)))
          #f
          (begin
            (read-char port)
            (set! scanned (cons c scanned))
            #t))))
  (define (scan-comment)
    (let ((c (read-char port)))
      (if (or (eof-object? c) (char=? c #\newline))
          #f
          (scan-comment))))
  (define (scan-string chars)
    (let ((c (peek-char port)))
      (if (eof-object? c)
          (begin
            (error line "Unterminated string")
            #f)
          (begin
            (when (char=? c #\newline) (set! line (+ line 1)))
            (read-char port)
            (set! scanned (cons c scanned))
            (if (char=? c #\")
                (new-token 'STRING (list->string (reverse chars)))
                (scan-string (cons c chars)))))))
  (define (scan-token)
    (let ((c (read-char port)))
      (set! scanned (cons c scanned))
      (case c
        ((#\() (new-token1 'LEFT-PAREN))
        ((#\)) (new-token1 'RIGHT-PAREN))
        ((#\{) (new-token1 'LEFT-BRACE))
        ((#\}) (new-token1 'RIGHT-BRACE))
        ((#\,) (new-token1 'COMMA))
        ((#\.) (new-token1 'DOT))
        ((#\-) (new-token1 'MINUS))
        ((#\+) (new-token1 'PLUS))
        ((#\;) (new-token1 'SEMICOLON))
        ((#\*) (new-token1 'STAR))
        ((#\!) (new-token1 (if (match #\=) 'BANG-EQUAL 'BANG)))
        ((#\=) (new-token1 (if (match #\=) 'EQUAL-EQUAL 'EQUAL)))
        ((#\>) (new-token1 (if (match #\=) 'GREATER-EQUAL 'GREATER)))
        ((#\<) (new-token1 (if (match #\=) 'LESS-EQUAL 'LESS)))
        ((#\/) (if (match #\/)
                   (scan-comment)
                   (new-token1 'SLASH)))
        ((#\space #\return #\tab) #f)
        ((#\newline) (set! line (+ line 1)) #f)
        ((#\") (scan-string '()))
        (else (error line (string-append "Unknown token: " (string c)))))))
  (define (loop rev-tokens)
    (if (eof-object? (peek-char port))
        (reverse rev-tokens)
        (let* ((scanned (scan-token))
               (new-rev-tokens (if scanned (cons scanned rev-tokens) rev-tokens)))
          (loop new-rev-tokens))))
  (loop '()))

(define (run port)
  (let ((tokens (scan port)))
    (for-each (lambda (token)
                (display token))
              tokens)))

(define (run-prompt)
  (run (current-input-port))
  (newline))

(define (run-file f)
  (let ((port (open-input-file f)))
    (run port)
    (close-port port)
    (when *had-error* (exit 64))))

(define (test-scanner)
  (define (test-case input expected)
    (let* ((port (open-input-string input))
           (tokens (scan port))
           (token-types (map token-type tokens)))
      (close-port port)
      (when (not (equal? token-types expected))
        (display "test-scanner failed on input ")
        (display input)
        (display ": got ")
        (display token-types)
        (newline))))
  (test-case "==" '(EQUAL-EQUAL))
  (test-case "!" '(BANG))
  (test-case "// this is a comment" '())
  (test-case "(( )){}" '(LEFT-PAREN LEFT-PAREN RIGHT-PAREN RIGHT-PAREN LEFT-BRACE RIGHT-BRACE))
  (test-case "!*+-/=<> <= ==" '(BANG STAR PLUS MINUS SLASH EQUAL LESS GREATER LESS-EQUAL EQUAL-EQUAL))
  (test-case "\"hello\" \"world\"" '(STRING STRING))
  (test-case "\"hello\n\"" '(STRING)))

(define (test)
  (test-scanner))

(define (main args)
  (case (length args)
    ((0) (run-prompt))
    ((1) (if (string=? (car args) "--test")
             (test)
             (run-file (car args))))
    (else (begin (display "Usage: lox [script]")
                 (exit 64)))))

(main (cdr (program-arguments)))

